(defun fira-code-mode--make-alist (pairs)
  "Generate prettify-symbols alist from PAIRS."
  (mapcan
   (lambda (p)
     (let ((code (first p))
           (str (second p))
           (replace (third p)))
       (if replace
           (list (cons str replace))
         (let* ((width (string-width str))
                (prefix ())
                (suffix '(?\s (Br . Br)))
                (n 1))
           (while (< n width)
             (setq prefix (append prefix '(?\s (Br . Bl))))
             (setq n (1+ n)))
           (list
            (cons str (append prefix suffix (list (decode-char 'ucs code)))))))))
   pairs))

(defconst fira-code-mode--ligatures
  '((#Xe100 "www")
    (#Xe101 "**")
    (#Xe102 "***")
    (#Xe103 "**/")
    (#Xe104 "*>")
    (#Xe105 "*/")
    (#Xe106 "\\\\")
    ;; (#Xe107 "\\\\\\") ; commented out because grouping long strings of backslashes in pairs looks better than in triples
    (#Xe108 "{-")
    (#Xe109 "[]")
    (#Xe10a "::")
    (#Xe10b ":::")
    (#Xe10c ":=")
    (#Xe10d "!!")
    (#Xe10e "!=")
    (#Xe10f "!==")
    (#Xe110 "-}")
    (#Xe111 "--")
    (#Xe112 "---")
    (#Xe113 "-->")
    (#Xe114 "->")
    (#Xe115 "->>")
    (#Xe116 "-<")
    (#Xe117 "-<<")
    (#Xe118 "-~")
    (#Xe119 "#{")
    (#Xe11a "#[")
    (#Xe11b "##")
    (#Xe11c "###")
    (#Xe11d "####")
    (#Xe11e "#(")
    (#Xe11f "#?")
    (#Xe120 "#_")
    (#Xe121 "#_(")
    (#Xe122 ".-")
    (#Xe123 ".=")
    (#Xe124 "..")
    (#Xe125 "..<")
    (#Xe126 "...")
    (#Xe127 "?=")
    (#Xe128 "??")
    (#Xe129 ";;")
    (#Xe12a "/*")
    (#Xe12b "/**")
    (#Xe12c "/=")
    (#Xe12d "/==")
    (#Xe12e "/>")
    (#Xe12f "//")
    (#Xe130 "///")
    (#Xe131 "&&")
    (#Xe132 "||")
    (#Xe133 "||=")
    (#Xe134 "|=")
    (#Xe135 "|>")
    (#Xe136 "^=")
    (#Xe137 "$>")
    (#Xe138 "++")
    (#Xe139 "+++")
    (#Xe13a "+>")
    (#Xe13b "=:=")
    (#Xe13c "==")
    (#Xe13d "===")
    (#Xe13e "==>")
    (#Xe13f "=>")
    (#Xe140 "=>>")
    (#Xe141 "<=")
    (#Xe142 "=<<")
    (#Xe143 "=/=")
    (#Xe144 ">-")
    (#Xe145 ">=")
    (#Xe146 ">=>")
    (#Xe147 ">>")
    (#Xe148 ">>-")
    (#Xe149 ">>=")
    (#Xe14a ">>>")
    (#Xe14b "<*")
    (#Xe14c "<*>")
    (#Xe14d "<|")
    (#Xe14e "<|>")
    (#Xe14f "<$")
    (#Xe150 "<$>")
    (#Xe151 "<!--")
    (#Xe152 "<-")
    (#Xe153 "<--")
    (#Xe154 "<->")
    (#Xe155 "<+")
    (#Xe156 "<+>")
    (#Xe157 "<=")
    (#Xe158 "<==")
    (#Xe159 "<=>")
    (#Xe15a "<=<")
    (#Xe15b "<>")
    (#Xe15c "<<")
    (#Xe15d "<<-")
    (#Xe15e "<<=")
    (#Xe15f "<<<")
    (#Xe160 "<~")
    (#Xe161 "<~~")
    (#Xe162 "</")
    (#Xe163 "</>")
    (#Xe164 "~@")
    (#Xe165 "~-")
    (#Xe166 "~=")
    (#Xe167 "~>")
    (#Xe168 "~~")
    (#Xe169 "~~>")
    (#Xe16a "%%")
    ;; (#Xe16b "x")
    (#Xe16c ":")
    (#Xe16d "+")
    ;; (#Xe16e "unused")
    (#Xe16f "*")))

(defvar fira-code-mode--old-prettify-symbols-alist)
(defvar fira-code-mode--old-prettify-symbols-compose-predicate)

(defun fira-code-mode--enable ()
  (prettify-symbols-mode -1)
  (setq-local fira-code-mode--old-prettify-symbols-alist
              prettify-symbols-alist)
  (setq-local prettify-symbols-alist
              (append (fira-code-mode--make-alist fira-code-mode--ligatures)
                      fira-code-mode--old-prettify-symbols-alist))
  (setq-local fira-code-mode--old-prettify-symbols-compose-predicate
              prettify-symbols-compose-predicate)
  (setq-local prettify-symbols-compose-predicate
              (lambda (start end match) t))
  (prettify-symbols-mode 1))

(defun fira-code-mode--disable ()
  (prettify-symbols-mode -1)
  (setq-local prettify-symbols-alist fira-code-mode--old-prettify-symbols-alist)
  (setq-local prettify-symbols-compose-predicate fira-code-mode--old-prettify-symbols-compose-predicate)
  (prettify-symbols-mode 1))

(define-minor-mode fira-code-mode
  "Fira Code ligatures minor mode"
  :lighter nil
  (setq-local prettify-symbols-unprettify-at-point 'right-edge)
  (if fira-code-mode
      (fira-code-mode--enable)
    (fira-code-mode--disable)))

(set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")

(provide 'fira-code-mode)

(define-globalized-minor-mode global-fira-code-mode fira-code-mode
  (lambda () (fira-code-mode 1)))
